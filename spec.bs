<pre class='metadata'>
Title: Shared Storage API
Shortname: sharedStorage
Level: 1
Status: CG-DRAFT
Group: WICG
URL: https://github.com/WICG/shared-storage
Editor: Camillia Smith Barnes, Google https://google.com, cammie@chromium.org
Markup Shorthands: markdown yes
Abstract: Shared Storage is a storage API that is intentionally not partitioned by top-frame site (though still partitioned by context origin of course!). To limit cross-site reidentification of users, data in Shared Storage may only be read in a restricted environment that has carefully constructed output gates.
</pre>

<pre class=link-defaults>
spec:url; type:interface; text:URL
</pre>

<pre class="anchors">
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        text: relevant settings object; url: webappapis.html#relevant-settings-object
        text: obtaining a worklet agent; url: webappapis.html#obtain-a-worklet-agent
        text: environment; url: webappapis.html#environment
        text: environment settings object; url: webappapis.html#environment-settings-object
        text: relevant settings object; url: webappapis.html#relevant-settings-object
        text: target browsing context; url: webappapis.html#concept-environment-target-browsing-context
        text: active document; url: webappapis.html#active-document
        text: module script; url: webappapis.html#module-script
        text: module map; url: webappapis.html#module-map
        text: beginning navigation; url: webappapis.html#beginning-navigation
        text: ending navigation; url: webappapis.html#ending-navigation
        text: browsing context; for: Window; url: webappapis.html#window-bc
        text: node navigable; url: webappapis.html#node-navigable
        text: parent; for: navigable; url: webappapis.html#nav-parent
        text: opaque origin; url: browsers.html#concept-opaque-origin
        text: worklet global scope type; url: worklets.html#worklet-global-scope-type
        text: set up a worklet environment settings object; url: worklets.html#set-up-a-worklet-environment-settings-object
        text: inparallel; url: infrastructure.html#in-parallel
        text: parallel queue; url: infrastructure.html#parallel-enqueue
        text: enqueue the following steps; url: infrastructure.html#enqueue-the-following-steps
        text: browsing context; url: document-sequences.html#browsing-context
        text: active window; url: document-sequences.html#active-window
spec: html; urlPrefix: https://url.spec.whatwg.org
    type: dfn
        text: URL parser; url: concept-url-parser
        text: origin; for: url; url: concept-url-origin
spec: html; urlPrefix: https://dom.spec.whatwg.org/
    type: dfn
        text: origin; for: document; url: concept-document-origin
spec: html; urlPrefix: https://infra.spec.whatwg.org
    type: dfn
        text: user agent; url: user-agent
        text: string; url: string
        text: concatenate; for: string; url: string-concatenate
        text: map; url: ordered-map
        text: set; for: map; url: map-set
        text: get; for: map; url: map-get
        text: remove; url: map-remove
        text: clear; for: map; url: map-clear
        text: contains; for: map; url: map-exists
        text: key; for: map; url: map-key
        text: value; for: map; url: map-value
        text: entry; for: map; url: map-entry
        text: get the keys; url: map-getting-the-keys
        text: get the values; url: map-getting-the-values
        text: size; for: map; url: map-size
        text: empty; for: map; url: map-is-empty
        text: append; for: set; url: set-append
        text: list; url: list
        text: empty; for: list; url: list-is-empty
        text: append; for: list; url: list-append
        text: item; for: list; url: list-item
        text: struct; url: struct
        text: item; for: struct; url: struct-item
        text: queue; url: queue
        text: enqueue; for: queue; url: queue-enqueue
        text: dequeue; for: queue; url: queue-dequeue
spec: html; urlPrefix: https://webidl.spec.whatwg.org
    type: dfn
        text: upon fulfillment; url: upon-fulfillment
        text: dictionary; url: dfn-dictionary
        text: async iterator; url: idl-async-iterable
        text: asynchronous iterator initialization steps; url: asynchronous-iterator-initialization-steps
        text: get the next iteration result; url: dfn-get-the-next-iteration-result
        text: Web IDL Standard; url: introduction
spec: html; urlPrefix: https://storage.spec.whatwg.org/
    type: dfn
        text: storage model; url: model
        text: storage key; url: storage-key
        text: storage shed; url: storage-shed
        text: storage shelf; url: storage-shelf
        text: storage bucket; url: storage-bucket
        text: storage bottle; url: storage-bottle
        text: quota; for: storage bottle; url: storage-bottle-quota
        text: storage endpoint; url: storage-endpoint
        text: storage type; url: storage-type
        text: storage identifier; url: storage-identifier
        text: quota; for: storage endpoint; url: storage-endpoint-quota
        text: register; for: storage endpoint; url: registered-storage-endpoints
        text: bucket map; url: bucket-map
        text: bottle map; url: bottle-map
        text: storage proxy map; url: storage-proxy-map
        text: backing map; url: storage-proxy-map-backing-map
        text: proxy map reference set; url: storage-bottle-proxy-map-reference-set
spec: html; urlPrefix: https://tc39.es/ecma262/
    type: dfn
        text: object; url: sec-object-type
        text: function; url: function-object
        text: call; url: sec-call
        text: IsConstructor(); url: sec-isconstructor
        text: constructor; url: constructor
        text: GetMethod(); url: sec-getmethod
        text: [[GetPrototypeOf]](); for: object; url: sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof
        text: assert; url: assert
spec: html; urlPrefix: https://streams.spec.whatwg.org/
    type: dfn
        text: iterable; url: readablestream
spec: html; urlPrefix: https://www.rfc-editor.org/rfc/rfc4122
    type: dfn
        text: urn:uuid
spec: html; urlPrefix: https://wicg.github.io/fenced-frame/
    type: dfn
        text: fenced frame; url: the-fencedframe-element
        text: FencedFrameConfig; url: fencedframeconfig
        text: url; for: FencedFrameConfig; url: dom-fencedframeconfig-url
spec: md; urlPrefix: https://github.com/patcg-individual-drafts/private-aggregation-api/blob/main/README.md
    type: dfn
        text: private aggregation
spec: html; urlPrefix: https://privacycg.github.io/storage-partitioning/
    type: dfn
        text: client-side storage partitioning
spec: html; urlPrefix: https://en.wikipedia.org/wiki/Entropy_(information_theory)
    type: dfn
        text: bits of entropy
        text: entropy bits
</pre>

<style>
/* adapted from .XXX at https://resources.whatwg.org/standard.css */
.todo {
  color: #D50606;
  background: white;
  border: solid #D50606;
}

span.todo {
  padding-top: 0;
  padding-bottom: 0;
}

.todo::before { content: 'TODO: '; }

span.todo::before {
  left: 0;
  top: -0.25em;
}
</style>

Introduction {#intro}
=====================
<em>This section is not normative.</em>

In order to prevent cross-site user tracking, browsers are partitioning all forms of storage by top-frame site; see [=Client-Side Storage Partitioning=]. But, there are many legitimate use cases currently relying on unpartitioned storage.

This document introduces a new storage API that is intentionally not partitioned by top-frame site (though still partitioned by context origin), in order to serve a number of the use cases needing unpartitioned storage. To limit cross-site reidentification of users, data in Shared Storage may only be read in a restricted environment, such as in a [=fenced frame=] or via the [=private aggregation|private aggregation service=]. Over time, there may be additional ouput gates included in the standard.

<div class="example">
  `a.example` randomly assigns users to groups in a way that is consistent cross-site.

  Inside an `a.example` iframe:
  <pre class="lang-js">
    function generateSeed() { … }
    await window.sharedStorage.worklet.addModule('experiment.js');

    // Only write a cross-site seed to a.example's storage if there isn't one yet.
    window.sharedStorage.set('seed', generateSeed(), { ignoreIfPresent: true });

    let fencedFrameConfig = await window.sharedStorage.selectURL(
      'select-url-for-experiment',
      [
        {url: "blob:https://a.example/123…", reportingMetadata: {"click": "https://report.example/1..."}},
        {url: "blob:https://b.example/abc…", reportingMetadata: {"click": "https://report.example/a..."}},
        {url: "blob:https://c.example/789…"}
      ],
      { data: { name: 'experimentA' } }
    );

    // Assumes that the fenced frame 'my-fenced-frame' has already been attached.
    document.getElementById('my-fenced-frame').config = fencedFrameConfig;
  </pre>

  inside the `experiment.js` worklet script:
  <pre class="lang-js">
    class SelectURLOperation {
      hash(experimentName, seed) { … }

      async run(data, urls) {
        const seed = await this.sharedStorage.get('seed');
        return hash(data.name, seed) % urls.length;
      }
    }
    register('select-url-for-experiment', SelectURLOperation);
  </pre>
</div>

The {{SharedStorageWorklet}} Interface {#worklet}
=================================================
The {{SharedStorageWorklet}} object allows developers to supply [=module scripts=] to process [=Shared Storage=] data and then output the result through one or more of the output gates. Currently there are two output gates, the [=private aggregation=] output gate and the {{WindowSharedStorage/selectURL()|URL-selection}} output gate.

<xmp class='idl'>
  [Exposed=(Window)]
  interface SharedStorageWorklet : Worklet {
  };
</xmp>

  ## The {{SharedStorageWorkletGlobalScope}} ## {#global-scope}

  The {{SharedStorageWorklet}}'s [=worklet global scope type=] is {{SharedStorageWorkletGlobalScope}}. 

  <xmp class='idl'>
    [Exposed=SharedStorageWorklet, Global=SharedStorageWorklet]
    interface SharedStorageWorkletGlobalScope : WorkletGlobalScope {
      undefined register(DOMString name,
                         SharedStorageOperationConstructor operationCtor);
    };

    callback SharedStorageOperationConstructor = SharedStorageOperation(object options);

    [Exposed=SharedStorageWorklet]
    interface SharedStorageOperation {
    };
  </xmp>

  Each {{SharedStorageWorkletGlobalScope}} has an associated [=environment settings object=] <dfn for=SharedStorageWorkletGlobalScope>outside settings</dfn>, which is the associated {{SharedStorageWorklet}}'s [=relevant settings object=].

  The {{SharedStorageWorkletGlobalScope}}'s [=module map=]'s [=module scripts=] should each define and {{register}} one or more {{SharedStorageOperation}}s. 

  Each {{SharedStorageWorkletGlobalScope}} also has an associated <dfn for=SharedStorageWorkletGlobalScope>operation map</dfn>, which is an [=map=], initially empty, of [=strings=] (denoting operation names) to [=functions=].

  Currently each {{SharedStorageOperation}} registered via {{SharedStorageWorkletGlobalScope/register()}} must be one of the following two types:
  * {{SharedStorageRunOperation}}
  * {{SharedStorageSelectURLOperation}}

  A {{SharedStorageRunOperation}} is an {{SharedStorageOperation}} that has no JavaScript return value, and hence is especially suited for calling into the [=private aggregation=] service.

  A {{SharedStorageSelectURLOperation}} is an {{SharedStorageOperation}} that takes in a [=list=] of {{SharedStorageUrlWithMetadata}}s (i.e. [=dictionaries=] containing [=strings=] representing {{URL}}s each wrapped with metadata) and returns a {{long}} integer index specifying which of these {{URL}}s should be selected.

  <xmp class='idl'>
    [Exposed=SharedStorageWorklet]
    interface SharedStorageRunOperation : SharedStorageOperation {
      Promise<undefined> run(object data);
    };

    [Exposed=SharedStorageWorklet]
    interface SharedStorageSelectURLOperation : SharedStorageOperation {
      Promise<long> run(object data,
                        FrozenArray<SharedStorageUrlWithMetadata> urls);
    };

    dictionary SharedStorageUrlWithMetadata {
      USVString url;
      object reportingMetadata;
    };
  </xmp>

  ## Registering a Worklet ## {#register-worklet}
  <div algorithm>
    For the <dfn method for="SharedStorageWorkletGlobalScope">register(|name|, |operationCtor|)</dfn> method, run the following steps [=in parallel=]:

    1. If |name| is missing or empty, throw a {{TypeError}}.
    1. Let |operationMap| be this {{SharedStorageWorkletGlobalScope}}'s [=SharedStorageWorkletGlobalScope/operation map=].
    1. If |operationMap| [=map/contains=] an [=map/entry=] with [=map/key=] |name|, throw a {{TypeError}}.
    1. If |operationCtor| is missing, throw a {{TypeError}}.
    1. Let |isConstructor| be the result of running [=IsConstructor()=] with |operationCtor|.
    1. If |isConstructor| is false, throw a {{TypeError}}.
    1. Let |prototype| be the result of running |operationCtor|'s [=object/[[GetPrototypeOf]]()=] method.
    1. If |prototype| is not an [=object=], throw a {{TypeError}}.
    1. Let |run| be the result of running [=GetMethod()=] with |prototype| and "`run`".
    1. If |run| is undefined, throw a {{TypeError}}.
    1. [=map/Set=] the value of |operationMap|[|name|] to |run|.
  </div>

The [=Shared Storage Database=] {#database}
===========================================
A [=user agent=] holds a <dfn>shared storage database</dfn>, which consists of a [=shared storage shed=] and provides methods to [=shared storage database/store an entry in the database|store=], [=shared storage database/retrieve an entry from the database|retrieve=], [=shared storage database/delete an entry from the database|delete=], [=shared storage database/clear all entries in the database|clear=], and [=shared storage database/purge expired entries from the database|purge expired=] data, and additional methods as below. The data in the [=shared storage database|database=] take the form of [=shared storage database/entry|entries=].

Each <dfn for="shared storage database">entry</dfn> consists of a [=entry/key=] and a [=entry/value struct=].

An [=shared storage database/entry=]'s <dfn for=entry>key</dfn> is a [=string=].

[=User agents=] may specify the <dfn for=key>maximum length</dfn> of a [=entry/key=].

Since [=entry/keys=] are used to organize and efficiently retrieve [=shared storage database/entry|entries=], [=entry/keys=] must appear at most once on any given [=shared storage shelf=] in a [=shared storage database|database=]'s [=shared storage shed=].

An [=shared storage database/entry=]'s <dfn for=entry>value struct</dfn> is a [=struct=] composed of [=string=] <dfn for="value struct">value</dfn> and timestamp <dfn for="value struct">last updated</dfn>.

[=User agents=] may specify the <dfn for=value>maximum length</dfn> of a [=value struct/value=].

[=User agents=] may specify a <dfn>default entry lifetime</dfn>, the default duration between when an [=shared storage database/entry=] is [=shared storage database/store an entry in the database|stored=] and when it expires.

A <dfn>shared storage database queue</dfn> for a [=/browsing context=] is a [=parallel queue=] on which the each of the [=shared storage database=]'s methods run when calls to them are initiated from that [=/browsing context=].

  ## The [=Shared Storage Database|Database=] Algorithms ## {#database-algorithms}

  <div algorithm>
    To <dfn for="shared storage database">store an entry in the database</dfn>, given a [=/browsing context=] |context|, a [=entry/key=] |key|, and a [=value struct/value=] |value|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. If |key| is not a [=string=] or exceeds the [=key/maximum length=], return failure.
    1. If |value| is not a [=string=] or exceeds the [=value/maximum length=], return failure.
    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. Let |time| be the current time.
    1. Let |valueStruct| be a new [=entry/value struct=].
    1. Set |valueStruct|'s [=value struct/value=] to |value|.
    1. Set |valueStruct|'s [=value struct/last updated=] to |time|.
    1. [=map/Set=] |databaseMap|[|key|] to |valueStruct|.
  </div>

  <div algorithm>
    To <dfn for="shared storage database">retrieve an entry from the database</dfn>, given a [=/browsing context=] |context| and a [=entry/key=] |key|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. If |key| is not a [=string=] or exceeds the [=key/maximum length=], return failure.
    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. If |databaseMap| does not [=map/contain=] |key|, return undefined.
    1. Let |valueStruct| be the result of running [=map/Get=] on |databaseMap| with |key|.
    1. Let |isExpired| be the result of running [=shared storage database/determine whether an entry is expired=] with |valueStruct|.
    1. If |isExpired| is true, return undefined.
    1. Let |value| be |valueStruct|'s [=value struct/value=].
    1. Return |value|.
  </div>

  <div algorithm>
    To <dfn for="shared storage database">delete an entry from the database</dfn>, given a [=/browsing context=] |context| and a [=entry/key=] |key|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. If |key| is not a [=string=] or exceeds the [=key/maximum length=], return failure.
    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. [=map/Remove=] |databaseMap|[|key|].
  </div>

  <div algorithm>
    To <dfn for="shared storage database">clear all entries in the database</dfn>, given a [=/browsing context=] |context|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. Run [=map/Clear=] on |databaseMap|.
  </div>

  <div algorithm>
    To <dfn for="shared storage database">retrieve all entries from the database</dfn>, given a [=/browsing context=] |context|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. Let |entries| be the result of running [=map/getting the values=] on |databaseMap|.
    1. Return |entries|.
  </div>

  <div algorithm>
    To <dfn for="shared storage database">count entries in the database</dfn>, given a [=/browsing context=] |context|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. Let |count| be |databaseMap|'s [=map/size=].
    1. Return |count|.
  </div>

  <div algorithm>
    To <dfn for="shared storage database">purge expired entries from the database</dfn>, given a [=/browsing context=] |context|, [=enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:

    1. Let |environment| be |context|'s [=active window=]'s [=relevant settings object=].
    1. Let |databaseMap| be the result of running [=obtain a shared storage bottle map=] for |environment|.
    1. For each [=entry/key=] |key| in |databaseMap|:
        1. Let |valueStruct| be the result of running [=map/Get=] on |databaseMap| with |key|.
        1. Let |isExpired| be the result of running [=shared storage database/determine whether an entry is expired=] with |valueStruct|.
        1. If |isExpired| is true, [=map/Remove=] |databaseMap|[|key|].
  </div>

  <div algorithm>
    To <dfn for="shared storage database">determine whether an entry is expired</dfn>, given a [=entry/value struct=] |valueStruct|:

    1. Let |lastUpdated| be |valueStruct|'s [=value struct/last updated=].
    1. Let |lifetime| be [=user agent=]'s [=default entry lifetime=].
    1. Let |expiration| be the sum of |lastUpdated| and |lifetime|.
    1. let |time| be the current time.
    1. If |expiration| is less than or equal to |time|, return true.
    1. Otherwise, return false.
  </div>



  ## Monkey Patch for the [=Storage Model=] ## {#monkey-patch}
  After adding a new [=storage type=] "`shared`" to the [=Storage Model=], this standard will [=storage endpoint/register=] a [=storage endpoint=] of [=storage type|type=] "`shared`" with [=storage identifier=] "`sharedStorage`" and [=storage endpoint/quota=] `5`<sup>`4`</sup> `*` `2`<sup>`16`</sup> bytes (i.e. 39.0625 mebibytes).

  <span class=todo>This [=storage endpoint/quota=] is calculated from the current implementation. Consider bringing the current implementation in line with the spec for [=storage endpoints=] "`localStorage`" and "`sessionStorage`", i.e. `5 * 2`<sup>`20`</sup> bytes. For example, decreasing the per-origin entry limit from 10,000 to 1,280 would achieve this.</span>

  A [=user agent=] holds a [=shared storage shed=] for [=storage endpoints=] of [=storage type|type=] "`shared`".

  A <dfn>shared storage shed</dfn> is a [=map=] of [=/origins=] to to [=storage shelf|storage shelves=]. It is initially empty.

  Note: Unlike [=storage sheds=], whose keys are [=storage keys=], [=shared storage sheds=] use [=/origins=] as keys directly. [=Shared storage=] will be intentionally excluded from [=client-side storage partitioning=].

  A [=user agent=]'s [=shared storage shed=] holds all <dfn>shared storage</dfn> data.

  A <dfn>shared storage shelf</dfn> is a [=storage shelf=] in a [=shared storage shed=].

  <div algorithm>
    To <dfn>obtain a shared storage shelf</dfn>, given a [=shared storage shed=] |shed| and an [=environment settings object=] |environment|, run these steps [=in parallel=]:

    1. Let |origin| be |environment|'s [=url/origin=].
    1. If |origin| is an [=opaque origin=], then return failure.
    1. If the user has disabled [=shared storage=], then return failure.
    1. If |shed|[origin] does not exist, then set |shed|[origin] to the result of running [=create a shared storage shelf=] with [=storage type|type=] "`shared`".
    1. Return |shed|[|origin|].
  </div>

  <div algorithm>
    To <dfn>create a shared storage shelf</dfn>, run these steps [=in parallel=]:

    1. Let |shelf| be a new [=storage shelf=].
    1. Set |shelf|'s [=bucket map=]["`default`"] to the result of running [=create a shared storage bucket=].
    1. Return |shelf|.
  </div>

  A <dfn>shared storage bucket</dfn> is a [=storage bucket=] in a [=shared storage shelf=].

  <div algorithm>
    To <dfn>create a shared storage bucket</dfn>, run these steps [=in parallel=]:

    1. Let |endpoint| be the [=storage endpoint=] with [=storage identifier=] "`sharedStorage`".
    1. Let |bucket| be a new [=shared storage bucket=].
    1. Set |bucket|'s [=bottle map=]["`sharedStorage`"] to a new [=storage bottle=] whose [=storage bottle/quota=] is |endpoint|'s [=storage endpoint/quota=].
    1. Return |bucket|.
  </div>

  Note: Currently, a [=shared storage bucket=]'s [=bottle map=] has [=map/size=] `1`, since there is only one [=storage endpoint=] [=storage endpoint/registered=] with [=storage type|type=] "`shared`".

  <div algorithm>
    To <dfn>obtain a shared storage bottle map</dfn>, given an [=environment settings object=] |environment|, run these steps [=in parallel=]:

    1. Let |shed| be the [=user agent=]'s [=shared storage shed=].
    1. Let |shelf| be the result of running [=obtain a shared storage shelf=] with |shed| and |environment|.
    1. If |shelf| is failure, then return failure.
    1. Let |bucket| be |shelf|'s [=bucket map=]["`default`"].
    1. Let |bottle| be |bucket|'s [=bottle map=]["`sharedStorage`"].
    1. Let |proxyMap| be a new [=storage proxy map=] whose [=backing map=] is |bottle|'s [=map=].
    1. [=set/Append=] |proxyMap| to |bottle|'s [=proxy map reference set=].
    1. Return |proxyMap|.
  </div>

The {{SharedStorage}} Interface {#shared-storage-interface}
==========================================================
The {{SharedStorage}} interface is the base for derived interfaces {{WindowSharedStorage}} and {{WorkletSharedStorage}}, which are exposed to the {{Window}} and the {{SharedStorageWorklet}}, respectively.

Methods that allow the setting and/or deleting of data are exposed to both the {{Window}} and the {{SharedStorageWorklet}} and hence are declared in the base {{SharedStorage}} interface, although their implementations may vary depending on their [=environment=]. This makes it possible to modify the data in Shared Storage from multiple contexts.

Meanwhile, methods for running {{SharedStorageOperation}}s, along with the {{WindowSharedStorage/worklet}} attribute which is used to call {{Worklet/addModule()}}, are declared in {{WindowSharedStorage}} and exposed to the {{Window}} only, as these are the means by which the {{Window}} interacts with the {{SharedStorageWorklet}}.

On the other hand, methods for getting data from the [=shared storage database=] are declared in {{WorkletSharedStorage}} and exposed to the {{SharedStorageWorklet}} only, in order to carefully control the flow of data read from the [=shared storage database|database=].

<xmp class='idl'>
  [Exposed=(Window,SharedStorageWorklet)]
  interface SharedStorage {
    Promise<any> set(DOMString key,
                     DOMString value,
                     optional SharedStorageSetMethodOptions options = {});
    Promise<any> append(DOMString key,
                        DOMString value);
    Promise<any> delete(DOMString key);
    Promise<any> clear();
  };

  dictionary SharedStorageSetMethodOptions {
    boolean ignoreIfPresent = false;
  };
</xmp>

  ## The {{WindowSharedStorage}} interface ## {#window}

  The {{WindowSharedStorage}} interface is as follows.

<xmp class='idl'>
  [Exposed=(Window)]
  interface WindowSharedStorage : SharedStorage {
    Promise<any> run(DOMString name,
                     optional SharedStorageRunOperationMethodOptions options = {});
    Promise<USVString> selectURL(DOMString name,
                                 FrozenArray<SharedStorageUrlWithMetadata> urls,
                                 optional SharedStorageRunOperationMethodOptions options = {});

    readonly attribute SharedStorageWorklet worklet;
  };

  dictionary SharedStorageRunOperationMethodOptions {
    object data;
  };
</xmp>

  ### Window Setter/Deleter Methods ### {#window-setter}

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">set(|key|, |value|, |options|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WindowSharedStorage}}'s {{Window}}'s [=Window/browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |value| is not a {{DOMString}} or exceeds the [=value/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |options| is invalid, reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |options| is empty, create |options|.
        1. If |options|["`ignoreIfPresent`"] is true:
            1. Let |currentValue| be the result of running [=shared storage database/retrieve an entry from the database=] with |context| and |key|.
            1. If |currentValue| is not failure, resolve |promise| as undefined.
            1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|.
            1. Resolve |promise| as undefined.
        1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">append(|key|, |value|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WindowSharedStorage}}'s {{Window}}'s [=Window/browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |value| is not a {{DOMString}} or exceeds the [=value/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. Let |currentValue| be the result of running [=shared storage database/retrieve an entry from the database=] with |context| and |key|.
        1. If |currentValue| is not failure:
            1. Let |list| be a new [=list=].
            1. [=list/Append=] |currentValue| to |list|.
            1. [=list/Append=] |value| to |list|.
            1. Let |newValue| be the result of running [=string/concatenate=] on |list|.
            1. Run [=shared storage database/store an entry in the database=] with |context|, |key|, and |newValue|.
            1. Resolve |promise| as undefined.
        1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|..
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">delete(|key|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WindowSharedStorage}}'s {{Window}}'s [=Window/browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. Run [=shared storage database/delete an entry from the database=] with |context| and |key|.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">clear()</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WindowSharedStorage}}'s {{Window}}'s [=Window/browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. Run [=shared storage database/clear all entries in the database=] with |context|.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  ### Entropy Budget ### {#budget}

  Because [=bits of entropy=] can leak via {{WindowSharedStorage/selectURL()}} if a user activates the fenced frame from the resulting [=FencedFrameConfig=], there is a per-[=calling origin=] [=entropy allowance=].

  A <dfn>calling origin</dfn> for {{WindowSharedStorage/selectURL()}} is the [=url/origin=] of an [=environment=] that makes a {{WindowSharedStorage/selectURL()}} call.

  A <dfn>entropy allowance</dfn> is a maximum allowance of [=entropy bits=] that are permitted to leak during a given [=epoch=] and for a given calling [=calling origin=]. This [=entropy allowance|allowance=] is defined by the [=user agent=] and is [=calling origin=]-agnostic.

  An <dfn>epoch</dfn> is a time period whose duration is a fixed pretermined length.

  To keep track of how this [=entropy allowance=] is used, the [=user agent=] uses a <dfn>shared storage budget table</dfn>, which is a [=map=] of [=calling origins=] to [=entropy ledgers=].

  An <dfn>entropy ledger</dfn> is a [=list=] of [=bit debits=].

  A <dfn>bit debit</dfn> is a [=struct=] containing a {{double}} <dfn for="bit debit">bits</dfn>, indicating a value in [=entropy bits=], along with a time <dfn for="bit debit">timestamp</dfn>.

  When a leak occurs, its value in [=entropy bits=] is calculated and stored for that [=calling origin=] along with the current time as a [=bit debit=] in the [=shared storage budget table=].

  A [=calling origin=]'s <dfn for="calling origin">remaining budget</dfn> is the [=entropy allowance=] minus any [=bit debits=] whose timestamps are within the current [=epoch=].

  {{WindowSharedStorage/selectURL()}}'s argument "`urls`" is its <dfn for=selectURL>input URL list</dfn>.

  When an [=calling origin=] has insufficient [=calling origin/remaining budget=], {{WindowSharedStorage/selectURL()}} will return a [=FencedFrameConfig=] for the {{SharedStorageUrlWithMetadata/url}} in the {{SharedStorageUrlWithMetadata}} at the [=default index=] in its [=selectURL/input URL list=].

  The <dfn>default index</dfn> for a call to {{WindowSharedStorage/selectURL()}} is implementation-defined in such a way that it is independent from the result of the associated {{SharedStorageSelectURLOperation}}'s "`run`" method.

  <div class="example">
    The [=default index=] could be defined to be 0.

    In this case, whenever the {{SharedStorageSelectURLOperation}}'s "`run`" method encounters an error, or whenever there is insufficient [=calling origin/remaining budget=], the "`run`" method would return 0, and hence {{WindowSharedStorage/selectURL()}} would return the first {{SharedStorageUrlWithMetadata/url}} in its [=selectURL/input URL list=].
  </div>

  <div class="example">
    The [=default index=] could be defined to be [=selectURL/input URL list=]'s [=list/size=] minus 1.

    In this case, whenever the {{SharedStorageSelectURLOperation}}'s "`run`" method encounters an error, or whenever there is insufficient [=calling origin/remaining budget=], {{WindowSharedStorage/selectURL()}} would return the last {{SharedStorageUrlWithMetadata/url}} in its [=selectURL/input URL list=].
  </div>

  <div algorithm>
    To <dfn>determine remaining budget</dfn>, given a calling [=calling origin=] |origin|, run the following steps [=in parallel=]:

    1. If |origin| is [=opaque origin|opaque=], return failure.
    1. Let |maxBits| be the value of the [=user agent=]'s [=entropy allowance=].
    1. If the [=user agent=]'s [=shared storage budget table=] does not [=map/contain=] |origin|, then return |maxBits|.
    1. Otherwise, let |ledger| be [=user agent=]'s [=shared storage budget table=][|origin|].
    1. Let |time| be the current time.
    1. Let |epochLength| be the length of an [=epoch=].
    1. Let |threshold| be |time| - |epochLength|.
    1. Let |debitSum| be 0.
    1. For each [=list/item=] |bitDebit| in |ledger|, do the following steps:
        1. Let |timestamp| be |bitDebit|'s [=bit debit/timestamp=].
        1. Let |debit| be |bitDebit|'s [=bit debit/bits=].
        1. If |timestamp| is greater than or equal to |threshold|, then increment |debitSum| by |debit|.
    1. Let |remainingBudget| be |maxBits| minus |debitSum|.
    1. Return |remainingBudget|.
  </div>

  A [=bit debit=] will need to be charged to the [=shared storage budget table=] for each top-frame navigation initiated by a fenced frame whose source was generated via {{WindowSharedStorage/selectURL()}}, as this can leak cross-site data. Since the [=bit debit/bits=] to charge is calculated during the call to {{WindowSharedStorage/selectURL()}} but only actually recorded in the [=shared storage budget table=] if and when the resulting fenced frame initiates a top-frame navigation, the [=bit debit/bits=] must be stored as a <dfn>pending shared storage budget debit</dfn> in the corresponding [=FencedframeConfig=] until this time.

  Between [=beginning navigation=] and [=ending navigation=], a [=user agent=] will perform the [=charge shared storage budget=] algorithm.

  <div algorithm>
    To <dfn>charge shared storage budget</dfn> during a [=beginning navigation|navigation=] with [=navigable=] |navigable| and {{Document}} |sourceDocument|, run the following steps [=in parallel=]:

    1. If |navigable| is not a [=navigable/traversable navigable=], return.
    1. Let |node| be |sourceDocument|'s [=node navigable=].
    1. While |node| is not null:
        1. If |node| has a [=FencedFrameConfig=]:
            1. Let |origin| be |node|'s [=active document=]'s [=document/origin=].
            1. Let |pendingBits| be |node|'s [=FencedFrameConfig=]'s [=pending shared storage budget debit=].
            1. If |pendingBits| is greater than 0, run the following steps:
                1. Let |ledger| be [=user agent=]'s [=shared storage budget table=][|origin|].
                1. Let |bitDebit| be a new [=bit debit=].
                1. Set |bitDebit|'s [=bit debit/bits=] to |pendingBits|.
                1. Set |bitDebit|'s [=bit debit/timestamp=] to the current time.
                1. [=list/Append=] |bitDebit| to |ledger|.
                1. Set |node|'s [=FencedFrameConfig=]'s [=pending shared storage budget debit=] to 0.
        1. Set |node| to |node|'s [=navigable/parent=].
  </div>

  ### Run Operation Methods ### {#run-op}

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">run(|name|, |options|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1.  Run the following steps [=in parallel=]:
        1. If {{Worklet/addModule()}} has not yet been called, reject |promise|.
        1. Let |outsideSettings| be {{WindowSharedStorage/worklet}}'s [=relevant settings object=].
        1. Let |agent| be the result of [=obtaining a worklet agent=] given |outsideSettings|. Run the rest of these steps in |agent|.
        1. If {{WindowSharedStorage/worklet}}'s [=module map=] is not [=map/empty=]:
            1. Let |operationMap| be this {{SharedStorageWorkletGlobalScope}}'s [=SharedStorageWorkletGlobalScope/operation map=].
            1. If |operationMap| [=map/contains=] |name|:
                1.  Let |operation| be |operationMap|[|name|].
                1. If |options| [=map/contains=] |data|:
                    1. Let |argumentsList| be a new [=list=].
                    1. [=list/Append=] |data| to |argumentsList|.
                    1. [=Call=] |operation| with |argumentsList|.
                1. Otherwise, [=call=] |operation| without any arguments list.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WindowSharedStorage">selectURL(|name|, |urls|, |options|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |configPromise| be a new promise.
    1. Run the following steps [=in parallel=]:
        1. If |urls| is empty or exceeds the maximum allowed length, reject |configPromise|.
        1. Let |urlList| be an empty {{list}}.
        1. For each |urlWithMetadata| in |urls|:
            1. If |urlWithMetadata| has no field "`url`", reject |configPromise|.
            1. Otherwise, let |urlString| be |urlWithMetadata|["`url`"].
            1. Let |url| be the result of running a [=URL parser=] on |urlString|.
            1. If |url| is not a valid {{URL}}, reject |configPromise|.
            1. Otherwise, [=list/append=] |urlString| to |urlList|.
            1. If |urlWithMetadata| has field "`reportingMetadata`":
                1. Let |reportingMetadata| be |urlWithMetadata|["`reportingMetadata`"].
                1. If |reportingMetadata| is invalid, reject |configPromise|.
        1. If {{Worklet/addModule()}} has not yet been called, reject |configPromise|.
        1. Let |fencedFrameConfig| be a [=FencedFrameConfig=].
        1. Resolve |configPromise| as |fencedFrameConfig|.
        1. Let |indexPromise| be a new promise.
        1. Let |outsideSettings| be {{WindowSharedStorage/worklet}}'s [=relevant settings object=].
        1. Let |agent| be the result of [=obtaining a worklet agent=] given |outsideSettings|. Run the following steps in |agent|:
            1. Let |index| be [=default index=].
            1. If {{WindowSharedStorage/worklet}}'s [=module map=] is not [=map/empty=]:
                1. Let |operationMap| be the associated {{SharedStorageWorkletGlobalScope}}'s [=SharedStorageWorkletGlobalScope/operation map=].
                1. If |operationMap| [=map/contains=] |name|:
                    1.  Let |operation| be |operationMap|[|name|].
                    1. Let |argumentsList| be a new [=list=].
                    1. [=list/Append=] |urlList| to |argumentsList|.
                    1. If |options| [=map/contains=] |data|, [=list/Append=] |data| to |argumentsList|.
                    1. If |options| contains |data|, let |operationResult| be the result of running [=Call=] on |operation| with |argumentsList|.
                    1. If there are no errors:
                        1. Set |index| to the result of casting |operationResult| to an {{unsigned long}}. If this throws an exception, catch it and set |index| back to [=default index=].
                        1. If |index| is greater than |urlList|.[=list/size=], then set |index| back to [=default index=].
            1. Resolve |indexPromise| with |index|.
        1. [=Upon fulfillment=] of |indexPromise|, perform the following steps:
            1. Let |resultIndex| be the numerical value of |indexPromise|.
            1. Let |context| be {{WindowSharedStorage}}'s {{Window}}'s [=Window/browsing context=].
            1. [=Assert=] that |context| is not null.
            1. Let |origin| be |context|'s [=active document=]'s [=url/origin=].
            1. Let |remainingBudget| be the result of running [=determine remaining budget=] with |origin|.
            1. Let |listSize| be |urlList|'s [=list/size=].
            1. Let |pendingBits| be the logarithm base 2 of |listSize|.
            1. If |pendingBits| is greather than |remainingBudget|, set |resultIndex| to [=default index=].
            1. Set |fencedFrameConfig|'s [=pending shared storage budget debit=] to |pendingBits|.
            1. Set |fencedFrameConfig|'s [=FencedFrameConfig/url=] to |urlList|[|resultIndex|]. 
    1. Return |configPromise|.
  </div>

  ## The {{WorkletSharedStorage}} interface ## {#worklet-shared-storage}

  The {{WorkletSharedStorage}} interface is as follows.

<xmp class='idl'>
  [Exposed=(SharedStorageWorklet)]
  interface WorkletSharedStorage : SharedStorage {
    Promise<DOMString> get(DOMString key);
    Promise<unsigned long> length();
    Promise<double> remainingBudget();

    async iterable<DOMString, DOMString>;
  };
</xmp>

  ### Worklet Setter/Deleter Methods ### {#worklet-setter}

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">set(|key|, |value|, |options|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. Run the following steps [=in parallel=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |value| is not a {{DOMString}} or exceeds the [=value/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |options| is invalid, reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |options| is empty, create |options| with |options|["`ignoreIfPresent`"] set to false.
        1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
            1. If |options|["`ignoreIfPresent`"] is true:
                1. Let |currentValue| be the result of running [=shared storage database/retrieve an entry from the database=] with |context| and |key|.
                1. If |currentValue| is not failure, resolve |promise| as undefined.
                1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|.
                1. Resolve |promise| as undefined.
            1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|.
            1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">append(|key|, |value|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. Run the following steps [=in parallel=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. If |value| is not a {{DOMString}} or exceeds the [=value/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
            1. Let |currentValue| be the result of running [=shared storage database/retrieve an entry from the database=] with |context| and |key|.
            1. If |currentValue| is not failure:
                1. Let |list| be a new [=list=].
                1. [=list/Append=] |currentValue| to |list|.
                1. [=list/Append=] |value| to |list|.
                1. Let |newValue| be the result of running [=string/concatenate=] on |list|.
                1. Run [=shared storage database/store an entry in the database=] with |context|, |key|, and |newValue|.
                1. Resolve |promise| as undefined.
            1. Otherwise, run [=shared storage database/store an entry in the database=] with |context|, |key|, and |value|..
            1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">delete(|key|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. Run [=shared storage database/delete an entry from the database=] with |context| and |key|.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">clear()</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. Run [=shared storage database/clear all entries in the database=] with |context|.
        1. Resolve |promise| as undefined.
    1. Return |promise|.
  </div>

  ### Getter Methods ### {#getter}

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">get(|key|)</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. If |key| is not a {{DOMString}} or exceeds the [=key/maximum length=], reject |promise| with a "{{DataError}}" {{DOMException}}.
        1. Let |value| be the result of running [=shared storage database/retrieve an entry from the database=] with |context| and |key|.
        1. If |value| is failure, reject |promise|.
        1. If |value| is undefined, resolve |promise| as undefined.
        1. Otherwise, resolve |promise| as |value|.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">length()</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. Let |numEntries| be the result of running [=shared storage database/count entries in the database=] with |context|.
        1. Resolve |promise| as |numEntries|.
    1. Return |promise|.
  </div>

  <div algorithm>
    For the <dfn method for="WorkletSharedStorage">remainingBudget()</dfn> method, run the following steps [=in parallel=]:

    1. Let |promise| be a new promise.
    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. Let |origin| be |context|'s [=active document=]'s [=document/origin=].
    1. [=Enqueue the following steps=] on |context|'s associated [=shared storage database queue=]:
        1. Let |remainingBudget| be the result of running [=determine remaining budget=] with |origin|.
        1. Resolve |promise| as |remainingBudget|.
    1. Return |promise|.
  </div>

  ### Iteration ### {#iteration}

  Each {{WorkletSharedStorage}} [=async iterator=] instance has a [=queue=] <dfn for=WorkletSharedStorageIterator>pending entries</dfn> of [=shared storage database/entry|entries=], initially [=list/empty=].

  Each {{WorkletSharedStorage}} [=async iterator=] instance also has a {{boolean}} <dfn for=WorkletSharedStorageIterator>error</dfn>, initially false.

  The [=WorkletSharedStorageIterator/asynchronous iterator initialization steps=] and [=WorkletSharedStorageIterator/get the next iteration result=] algorithms defined below correspond to those referred to as the [=/asynchronous iterator initialization steps=] and [=/get the next iteration result=] algorithms in the [=Web IDL Standard=].

  <div algorithm>
    The <dfn for="WorkletSharedStorageIterator">asynchronous iterator initialization steps</dfn> for a {{WorkletSharedStorage}} [=async iterator=] |iterator| are:

    1. Let |context| be {{WorkletSharedStorage}}'s {{SharedStorageWorkletGlobalScope}}'s [[=outside settings=]'s [=target browsing context=].
    1. [=Assert=] that |context| is not null.
    1. Run the following steps [=in parallel=]:
        1. Let |entries| be the result of running [=shared storage database/retrieve all entries from the database=] with |context|.
        1. If |entries| is failure:
            1. Set |iterator|'s [=WorkletSharedStorageIterator/error=] to true.
            1. Return.
        1. For each [=shared storage database/entry=] |entry| in |entries|, [=queue/enqueue=] |entry| in |iterator|'s [=WorkletSharedStorageIterator/pending entries=].
  </div>

  <div algorithm>
    To<dfn for="WorkletSharedStorageIterator">get the next iteration result</dfn>, given a {{WorkletSharedStorage}}'s [=async iterator=] |iterator|, run the following steps:

    1. Let |promise| be a new promise.
    1. Run the following steps [=in parallel=]:
        1. If |iterator|'s [=WorkletSharedStorageIterator/error=] is true, reject |promise|.
        1. If |iterator|'s [=WorkletSharedStorageIterator/pending entries=] is [=list/empty=]:
            1. Create an object |doneObject|.
            1. Resolve |promise| with |doneObject|.
        1. Let |entry| be the result of [=queue/dequeue|dequeueing=] from |iterator|'s [=WorkletSharedStorageIterator/pending entries=].
        1. Resolve |promise| as |entry|.
    1. Return |promise|.
  </div>

Privacy Considerations {#privacy}
=================================
<p>
  <span class=todo>Add privacy considerations.</span>
</p>
